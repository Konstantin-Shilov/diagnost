import type {
  BurnoutLevel,
  DiagnosticResult,
  GreenbergStage,
  ScoringRules,
  SurveyResponse,
} from "@/core/types";

export class AnalysisService {
  private static calculateTotalScore(responses: SurveyResponse[]): number {
    let totalScore = 0;

    for (const response of responses) {
      if (response.blockId === "symptoms") {
        // 1. –ü–æ–¥—Å—á—ë—Ç –±–∞–ª–ª–æ–≤ –ø–æ —Å–∏–º–ø—Ç–æ–º–∞–º (0-3 –∑–∞ –∫–∞–∂–¥—ã–π)
        for (const answer of response.answers) {
          if (typeof answer.value === "number") {
            totalScore += answer.value;
          }
        }
      } else if (response.blockId === "state") {
        // 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        let energyScore = 0;
        let tensionScore = 0;
        let moodScore = 0;

        for (const answer of response.answers) {
          if (typeof answer.value === "number") {
            if (answer.questionId === "state_energy") {
              // –≠–Ω–µ—Ä–≥–∏—è: ‚â§3 ‚Üí +3, 4-6 ‚Üí +2, 7-10 ‚Üí +1
              if (answer.value <= 3) energyScore = 3;
              else if (answer.value <= 6) energyScore = 2;
              else energyScore = 1;
            } else if (answer.questionId === "state_tension") {
              // –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: ‚â•8 ‚Üí +3, 6-7 ‚Üí +2, 1-5 ‚Üí +1
              if (answer.value >= 8) tensionScore = 3;
              else if (answer.value >= 6) tensionScore = 2;
              else tensionScore = 1;
            } else if (answer.questionId === "state_mood") {
              // –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (% –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π): ‚â•70% ‚Üí +3, 50-69% ‚Üí +2, <50% ‚Üí +1
              if (answer.value >= 70) moodScore = 3;
              else if (answer.value >= 50) moodScore = 2;
              else moodScore = 1;
            }
          }
        }

        totalScore += energyScore + tensionScore + moodScore;
      } else if (response.blockId === "internal_causes") {
        // 3. –ü–æ–¥—Å—á—ë—Ç –±–∞–ª–ª–æ–≤ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –ø—Ä–∏—á–∏–Ω–∞–º (0-2 –∑–∞ –∫–∞–∂–¥—É—é)
        for (const answer of response.answers) {
          if (typeof answer.value === "number") {
            totalScore += answer.value;
          }
        }
      }
    }

    return totalScore;
  }

  private static getBurnoutLevel(score: number, rules: ScoringRules): BurnoutLevel {
    const { burnoutLevels } = rules;

    let level: BurnoutLevel["level"];
    let description: string;

    if (score >= burnoutLevels.critical.min) {
      level = "critical";
      description =
        "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≤—ã–≥–æ—Ä–∞–Ω–∏—è. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏.";
    } else if (score >= burnoutLevels.severe.min) {
      level = "severe";
      description =
        "–°–µ—Ä—å–µ–∑–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤—ã–≥–æ—Ä–∞–Ω–∏—è. –ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â—å—é.";
    } else if (score >= burnoutLevels.high.min) {
      level = "high";
      description =
        "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≤—ã–≥–æ—Ä–∞–Ω–∏—è. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.";
    } else if (score >= burnoutLevels.moderate.min) {
      level = "moderate";
      description =
        "–£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤—ã–≥–æ—Ä–∞–Ω–∏—è. –°—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä—ã.";
    } else {
      level = "low";
      description =
        "–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≤—ã–≥–æ—Ä–∞–Ω–∏—è. –í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º.";
    }

    const maxTotalScore = 69; // Based on our new survey configuration: 10*3 + 3*3 + 15*2 = 30+9+30 = 69

    return {
      level,
      score,
      maxScore: maxTotalScore,
      percentage: Math.round((score / maxTotalScore) * 100),
      description,
    };
  }

  private static getGreenbergStage(score: number, rules: ScoringRules): GreenbergStage {
    const { greenbergStages } = rules;

    if (score >= greenbergStages[5].min) {
      return {
        stage: 5,
        name: "–ü—Ä–æ–±–∏–≤–∞–Ω–∏–µ —Å—Ç–µ–Ω—ã",
        description: "–ü–æ–ª–Ω–æ–µ –∏—Å—Ç–æ—â–µ–Ω–∏–µ, –ø—Å–∏—Ö–æ—Å–æ–º–∞—Ç–∏–∫–∞, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—É—Å—Ç–æ—Ç–∞",
        characteristics: [
          "–ü–æ–ª–Ω–æ–µ –∏—Å—Ç–æ—â–µ–Ω–∏–µ",
          "–ü—Å–∏—Ö–æ—Å–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è",
          "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—É—Å—Ç–æ—Ç–∞",
          "–°–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º",
          "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è",
        ],
      };
    }
    if (score >= greenbergStages[4].min) {
      return {
        stage: 4,
        name: "–ö—Ä–∏–∑–∏—Å",
        description: "–ò—Å—Ç–æ—â–µ–Ω–∏–µ, –±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞, —Ç—Ä–µ–≤–æ–≥–∞, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã",
        characteristics: [
          "–ò—Å—Ç–æ—â–µ–Ω–∏–µ",
          "–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞",
          "–¢—Ä–µ–≤–æ–≥–∞",
          "–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã",
          "–°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        ],
      };
    }
    if (score >= greenbergStages[3].min) {
      return {
        stage: 3,
        name: "–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã",
        description: "–ë–æ–ª–µ–∑–Ω–∏, –∞–ø–∞—Ç–∏—è, —É—Ç—Ä–∞—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞, —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å",
        characteristics: [
          "–ë–æ–ª–µ–∑–Ω–∏",
          "–ê–ø–∞—Ç–∏—è",
          "–£—Ç—Ä–∞—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞",
          "–§–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å",
          "–°–Ω–∏–∂–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã",
        ],
      };
    }
    if (score >= greenbergStages[2].min) {
      return {
        stage: 2,
        name: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–ø–ª–∏–≤–∞",
        description: "–•—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å, —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —Å—Ç–∏–º—É–ª—è—Ç–æ—Ä–∞–º–∏",
        characteristics: [
          "–•—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å",
          "–†–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ",
          "–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —Å—Ç–∏–º—É–ª—è—Ç–æ—Ä–∞–º–∏",
          "–°–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞",
          "–ü–µ—Ä–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤—ã–≥–æ—Ä–∞–Ω–∏—è",
        ],
      };
    }
    return {
      stage: 1,
      name: "–ú–µ–¥–æ–≤—ã–π –º–µ—Å—è—Ü",
      description: "–í—ã—Å–æ–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è, –ª—ë–≥–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, —ç–Ω—Ç—É–∑–∏–∞–∑–º",
      characteristics: [
        "–í—ã—Å–æ–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è",
        "–õ—ë–≥–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ",
        "–≠–Ω—Ç—É–∑–∏–∞–∑–º",
        "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞–º",
        "–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
      ],
    };
  }

  private static getRecommendations(burnoutLevel: BurnoutLevel, stage: GreenbergStage): string[] {
    const recommendations: string[] = [];

    // Base recommendations based on burnout level
    switch (burnoutLevel.level) {
      case "critical":
        recommendations.push(
          "üö® –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é",
          "üè• –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –æ—Ç–ø—É—Å–∫–∞",
          "üîÑ –ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
          "üë• –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫ –±–ª–∏–∑–∫–∏–º",
        );
        break;
      case "severe":
        recommendations.push(
          "üë®‚Äç‚öïÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â—å—é",
          "‚è∞ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ä–∞–±–æ—á—É—é –Ω–∞–≥—Ä—É–∑–∫—É",
          "üßò –í–Ω–µ–¥—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Å—Ç—Ä–µ—Å—Å-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞",
          "üí§ –û–±–µ—Å–ø–µ—á—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–Ω –∏ –æ—Ç–¥—ã—Ö",
        );
        break;
      case "high":
        recommendations.push(
          "üìã –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ –∑–∞–¥–∞—á–∏",
          'üö´ –ù–∞—É—á–∏—Ç–µ—Å—å –≥–æ–≤–æ—Ä–∏—Ç—å "–Ω–µ—Ç" –ª–∏—à–Ω–∏–º –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º',
          "üèÉ‚Äç‚ôÇÔ∏è –£–≤–µ–ª–∏—á—å—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
          "üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ç–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–æ–π –∏ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω—å—é",
        );
        break;
      case "moderate":
        recommendations.push(
          "‚öñÔ∏è –°–ª–µ–¥–∏—Ç–µ –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º —Ä–∞–±–æ—Ç—ã –∏ –æ—Ç–¥—ã—Ö–∞",
          "üßò‚Äç‚ôÄÔ∏è –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏",
          "üìÖ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã",
          "üí™ –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –Ω–∞–≤—ã–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–æ–º",
        );
        break;
      case "low":
        recommendations.push(
          "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º",
          "üéØ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å",
          "üìà –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –Ω–∞–≤—ã–∫–∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏ —Å—Ç—Ä–µ—Å—Å–∞",
          "ü§ù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏",
        );
        break;
    }

    // Additional recommendations based on Greenberg stage
    if (stage.stage >= 3) {
      recommendations.push(
        "üó£Ô∏è –û—Ç–∫—Ä—ã—Ç–æ –æ–±—Å—É–¥–∏—Ç–µ —Å–≤–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º",
        "üîÑ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Ä–æ–ª–∏",
      );
    }

    if (stage.stage >= 4) {
      recommendations.push(
        "üåø –í–æ–∑—å–º–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–ø—É—Å–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
        "üß† –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏—é –∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
      );
    }

    return recommendations;
  }

  public static analyzeResults(
    responses: SurveyResponse[],
    scoringRules: ScoringRules,
  ): DiagnosticResult {
    const totalScore = this.calculateTotalScore(responses);
    const burnoutLevel = this.getBurnoutLevel(totalScore, scoringRules);
    const greenbergStage = this.getGreenbergStage(totalScore, scoringRules);
    const recommendations = this.getRecommendations(burnoutLevel, greenbergStage);

    return {
      id: `result_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      timestamp: new Date(),
      responses,
      burnoutLevel,
      greenbergStage,
      totalScore,
      maxTotalScore: burnoutLevel.maxScore,
      recommendations,
    };
  }
}
